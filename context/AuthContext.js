import React, { createContext, useState, useEffect } from "react";
import AsyncStorage from "@react-native-async-storage/async-storage";

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadUser = async () => {
      try {
        const storedToken = await AsyncStorage.getItem("token");
        if (storedToken) {
          setToken(storedToken);
          const response = await fetch("http://192.168.1.15:8080/api/auth/profile", {
            method: "GET",
            headers: { Authorization: `Bearer ${storedToken}` },
          });

          const data = await response.json();
          if (response.ok) {
            setUser(data);
            console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:", data);
          } else {
            console.log("üî¥ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è, —É–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω...");
            await AsyncStorage.removeItem("token");
            setToken(null);
            setUser(null);
          }
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      }
      setLoading(false);
    };

    loadUser();
  }, []);

  const login = async (email, password) => {
    try {
      const response = await fetch("http://192.168.1.15:8080/api/auth/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password }),
      });
  
      const data = await response.json();
      console.log("üì° –û—Ç–≤–µ—Ç –æ—Ç –±—ç–∫–µ–Ω–¥–∞:", data); // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
  
      if (response.ok) {
        await AsyncStorage.setItem("token", data.token);
        setToken(data.token);
        setUser(data.user); // ‚ùå –ï—Å–ª–∏ `data.user` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–¥–µ—Å—å –æ—à–∏–±–∫–∞!
        console.log("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ–≤—ã–π user:", data.user);
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", data.error);
      }
      return data;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:", error);
    }
  };
  

  const logout = async () => {
    console.log("üî¥ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...");
    setLoading(true);
    await AsyncStorage.removeItem("token");
    setToken(null);
    setUser(null);
    setLoading(false);
  };

  return (
    <AuthContext.Provider value={{ user, token, login, logout, loading }}>
      {children}
    </AuthContext.Provider>
  );
};
